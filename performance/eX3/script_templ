#!/bin/bash
#SBATCH -p $ARCH_QUEUE # partition (queue)
#SBATCH -N $ARCH_NUM_NODES # number of nodes
#SBATCH -n $ARCH_NUM_CORES  # number of cores
#SBATCH --mem-per-cpu=MaxMemPerCPU
#SBATCH -t 9-23:59 # time (D-HH:MM)
#SBATCH -o slurm.%N.%j.out # STDOUT
#SBATCH -e slurm.%N.%j.out # STDERR
#SBATCH --exclusive

#ulimit -s 200240
#export OMP_PROC_BIND=true
#export OMPI_MCA_btl_openib_warn_no_device_params_found=0
#export OMPI_MCA_btl_openib_if_include=mlx5_0:1
#export OMPI_MCA_btl=self,openib
#export OMPI_MCA_btl_tcp_if_exclude=lo,dis0,enp113s0f0
#module load intel/compiler/64/2019/19.0.5
#module load intel/mkl/64

module load intel/compiler/64/2020/19.1.3
module load intel/mkl/64

export SRC_DIR=/global/D1/projects/mtx/spmv-perf/src
export BIN_DIR=/global/D1/projects/mtx/spmv-perf/bin
export TEST_BIN=$BIN_DIR/$ARCH_NAME/_cpu_spmv_driver
export TEST_EXEC=$BIN_DIR/$ARCH_NAME/run_cpu_spmv

#if [ ! -f $TEST_BIN ]; then
# rm -rf $BIN_DIR/$ARCH_NAME && mkdir -p $BIN_DIR/$ARCH_NAME && cp -rf $SRC_DIR/* $BIN_DIR/$ARCH_NAME && cd $BIN_DIR/$ARCH_NAME && make clean && make cpu_spmv
# if [ $? -ne 0 ]; then
#  echo "Failed to compile binary for $ARCH_NAME architecture"
#  exit 1
# fi
#fi

#export MATRICES_LIST=../matrices/matrices.txt
export MATRICES_LIST=/global/D1/projects/mtx/datasets/suitesparse/matrices.txt
export MATRICES_MTX_ROOT=/global/D1/projects/mtx/datasets/suitesparse
export MATRICES_CSR_ROOT=/global/D1/projects/sparcity/datasets/suitesparse/csr
#export MATRICES_MTX_ROOT=/global/D1/projects/mtx/datasets/suitesparse_rcm
#export MATRICES_CSR_ROOT=/global/D1/projects/sparcity/datasets/suitesparse_rcm/csr

export RESULTS=/global/D1/projects/mtx/spmv-perf/results.csv

HEADER=true
while IFS=$'\t' read -r -a matrix
do
 if $HEADER; then
  HEADER=false
  continue
 fi
 export MATRIX_ID="$(echo -e "${matrix[0]}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
 export MATRIX_GROUP="$(echo -e "${matrix[1]}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
 export MATRIX_NAME="$(echo -e "${matrix[2]}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
 export MATRIX_PATH="$(echo -e "${matrix[3]}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
 echo "matrix: id=$MATRIX_ID, group=$MATRIX_GROUP, name=$MATRIX_NAME, path=$MATRIX_PATH"
 export KMP_AFFINITY=granularity=core,scatter
 timeout -k 1m 5m numactl -C$ARCH_CONFIG_CORES $TEST_BIN --csr --time=5 --var="RCM" --arch="$ARCH_NAME" --conf="$ARCH_CONFIG_NAME" --id=$MATRIX_ID --group=$MATRIX_GROUP --name=$MATRIX_NAME --threads=-1 --stat=$RESULTS --mtxroot=$MATRICES_MTX_ROOT --csrroot=$MATRICES_CSR_ROOT --mtx=$MATRIX_PATH
 if [ $? -ne 0 ]; then
  echo "Test execution error for $ARCH_NAME architecture and matrix: id=$MATRIX_ID, group=$MATRIX_GROUP, name=$MATRIX_NAME, path=$MATRIX_PATH"
 fi
done < $MATRICES_LIST
